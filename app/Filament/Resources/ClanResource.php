<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ClanResource\Pages;
use App\Filament\Resources\ClanResource\RelationManagers;
use App\Models\Clan;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class ClanResource extends Resource
{
    protected static ?string $model = Clan::class;

    protected static ?string $navigationIcon = 'heroicon-o-user-group';

    protected static ?string $navigationGroup = 'Community';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Basic Information')
                    ->schema([
                        Forms\Components\TextInput::make('name')
                            ->label('Clan Name (with colors)')
                            ->helperText('Plain name will be auto-generated by stripping color codes')
                            ->required()
                            ->maxLength(255),
                        Forms\Components\TextInput::make('tag')
                            ->label('Clan Tag')
                            ->maxLength(10),
                        Forms\Components\FileUpload::make('image')
                            ->label('Clan Image/Logo')
                            ->image()
                            ->directory('clan-images')
                            ->required(),
                    ])->columns(2),

                Forms\Components\Section::make('Ownership')
                    ->schema([
                        Forms\Components\Select::make('admin_id')
                            ->label('Clan Owner/Admin')
                            ->relationship('admin', 'username')
                            ->searchable()
                            ->required()
                            ->preload(),
                    ]),

                Forms\Components\Section::make('Visual Effects')
                    ->schema([
                        Forms\Components\TextInput::make('background')
                            ->label('Background Image URL')
                            ->maxLength(255),
                        Forms\Components\Select::make('name_effect')
                            ->label('Name Effect')
                            ->options([
                                'none' => 'None',
                                'particles' => 'Particles',
                                'glow' => 'Glow',
                                'rainbow' => 'Rainbow',
                            ])
                            ->default('particles')
                            ->required(),
                        Forms\Components\ColorPicker::make('effect_color')
                            ->label('Effect Color')
                            ->default('#60a5fa')
                            ->required(),
                        Forms\Components\Toggle::make('name_shadow_enabled')
                            ->label('Enable Name Shadow')
                            ->default(false),
                        Forms\Components\ColorPicker::make('name_shadow_color')
                            ->label('Name Shadow Color')
                            ->default('#000000'),
                        Forms\Components\Select::make('avatar_effect')
                            ->label('Avatar Effect')
                            ->options([
                                'none' => 'None',
                                'glow' => 'Glow',
                                'pulse' => 'Pulse',
                            ])
                            ->default('none')
                            ->required(),
                        Forms\Components\ColorPicker::make('avatar_effect_color')
                            ->label('Avatar Effect Color')
                            ->default('#60a5fa'),
                    ])->columns(2)->collapsible(),

                Forms\Components\Section::make('Moderation')
                    ->schema([
                        Forms\Components\Toggle::make('hidden')
                            ->label('Hide Clan')
                            ->helperText('Hidden clans will not appear in public listings')
                            ->default(false),
                        Forms\Components\Toggle::make('banned')
                            ->label('Ban Clan')
                            ->helperText('Banned clans cannot be recreated with the same name')
                            ->default(false),
                    ])->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\ImageColumn::make('image')
                    ->label('Logo')
                    ->circular()
                    ->size(40),
                Tables\Columns\TextColumn::make('name')
                    ->label('Clan Name')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('tag')
                    ->label('Tag')
                    ->searchable()
                    ->badge()
                    ->color('info'),
                Tables\Columns\TextColumn::make('admin.username')
                    ->label('Owner')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('players_count')
                    ->label('Members')
                    ->counts('players')
                    ->badge()
                    ->color('success'),
                Tables\Columns\IconColumn::make('hidden')
                    ->label('Hidden')
                    ->boolean()
                    ->sortable(),
                Tables\Columns\IconColumn::make('banned')
                    ->label('Banned')
                    ->boolean()
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Created')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->defaultSort('created_at', 'desc')
            ->filters([
                Tables\Filters\TernaryFilter::make('hidden')
                    ->label('Hidden Clans')
                    ->placeholder('All clans')
                    ->trueLabel('Only hidden')
                    ->falseLabel('Only visible'),
                Tables\Filters\TernaryFilter::make('banned')
                    ->label('Banned Clans')
                    ->placeholder('All clans')
                    ->trueLabel('Only banned')
                    ->falseLabel('Only active'),
                Tables\Filters\Filter::make('has_members')
                    ->label('Has Members')
                    ->query(fn (Builder $query): Builder => $query->has('players')),
                Tables\Filters\Filter::make('no_members')
                    ->label('No Members')
                    ->query(fn (Builder $query): Builder => $query->doesntHave('players')),
            ])
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\EditAction::make(),
                    Tables\Actions\Action::make('toggle_hidden')
                        ->label(fn (Clan $record) => $record->hidden ? 'Unhide' : 'Hide')
                        ->icon(fn (Clan $record) => $record->hidden ? 'heroicon-o-eye' : 'heroicon-o-eye-slash')
                        ->color(fn (Clan $record) => $record->hidden ? 'success' : 'warning')
                        ->action(fn (Clan $record) => $record->update(['hidden' => !$record->hidden]))
                        ->requiresConfirmation(),
                    Tables\Actions\Action::make('toggle_banned')
                        ->label(fn (Clan $record) => $record->banned ? 'Unban' : 'Ban')
                        ->icon(fn (Clan $record) => $record->banned ? 'heroicon-o-shield-check' : 'heroicon-o-shield-exclamation')
                        ->color(fn (Clan $record) => $record->banned ? 'success' : 'danger')
                        ->action(fn (Clan $record) => $record->update(['banned' => !$record->banned]))
                        ->requiresConfirmation(),
                    Tables\Actions\Action::make('change_owner')
                        ->label('Change Owner')
                        ->icon('heroicon-o-user-circle')
                        ->color('info')
                        ->form([
                            Forms\Components\Select::make('new_admin_id')
                                ->label('New Owner')
                                ->options(User::pluck('username', 'id'))
                                ->searchable()
                                ->required(),
                        ])
                        ->action(function (Clan $record, array $data) {
                            $record->update(['admin_id' => $data['new_admin_id']]);
                        })
                        ->requiresConfirmation(),
                    Tables\Actions\DeleteAction::make(),
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('hide')
                        ->label('Hide Selected')
                        ->icon('heroicon-o-eye-slash')
                        ->color('warning')
                        ->action(fn ($records) => $records->each->update(['hidden' => true]))
                        ->deselectRecordsAfterCompletion()
                        ->requiresConfirmation(),
                    Tables\Actions\BulkAction::make('unhide')
                        ->label('Unhide Selected')
                        ->icon('heroicon-o-eye')
                        ->color('success')
                        ->action(fn ($records) => $records->each->update(['hidden' => false]))
                        ->deselectRecordsAfterCompletion()
                        ->requiresConfirmation(),
                    Tables\Actions\BulkAction::make('ban')
                        ->label('Ban Selected')
                        ->icon('heroicon-o-shield-exclamation')
                        ->color('danger')
                        ->action(fn ($records) => $records->each->update(['banned' => true]))
                        ->deselectRecordsAfterCompletion()
                        ->requiresConfirmation(),
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\PlayersRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListClans::route('/'),
            'create' => Pages\CreateClan::route('/create'),
            'edit' => Pages\EditClan::route('/{record}/edit'),
        ];
    }
}
